// ==UserScript==
// @name         Enhanced Goodreads Recommendations Sorting with Bayesian Weighted Rating
// @namespace    http://yournamespace.com
// @version      1.2
// @description  Sort Goodreads recommendations by various methods (Bayesian weighted rating, average rating, composite score) with UI enhancements and error handling.
// @author       ...
// @match        https://www.goodreads.com/recommendations*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    // Cached DOM selectors
    let bookRows, listViewBox, bigBoxBody, ratingThresholdInput;

    // ---------------------------
    //  UTILITY: DOM SELECTORS
    // ---------------------------
    function updateSelectors() {
        bookRows = document.querySelectorAll('.bookRow.clearfix');
        listViewBox = document.querySelector('.listViewBox');
        bigBoxBody = document.querySelector('.bigBoxBody');
    }

    // ---------------------------
    //  UTILITY: RATING EXTRACTORS
    // ---------------------------
    // Extract the number of ratings from the rating element
    function getNumRatings(ratingElement) {
        if (ratingElement) {
            var match = ratingElement.textContent.match(/â€” (\d+,?\d+) ratings/);
            if (match) {
                return parseInt(match[1].replace(',', ''), 10);
            }
        }
        return 0;
    }

    // Extract the numeric value from the rating element
    function getRatingValue(ratingElement) {
        if (ratingElement) {
            var match = ratingElement.textContent.match(/(\d+\.\d+)/);
            if (match) {
                return parseFloat(match[0]);
            }
        }
        return NaN;
    }

    // ---------------------------
    //  SORT METHOD #1: COMPOSITE
    // ---------------------------
    function calculateCompositeScoreWithScaledNumRatings(bookElement) {
        var avgRating = getRatingValue(bookElement.querySelector('.minirating'));
        var numRatings = getNumRatings(bookElement.querySelector('.minirating'));
        var scaledNumRatings = (numRatings / 10000000) * 10;
        var weightAvgRating = 0.7;
        var weightScaledNumRatings = 0.3;
        var compositeScore = (weightAvgRating * avgRating) + (weightScaledNumRatings * scaledNumRatings);
        return compositeScore;
    }

    function sortRecommendationsByComposite() {
        console.log('Sort by Composite Score button clicked!');
        var bookArray = Array.from(bookRows);
        bookArray.sort(function(a, b) {
            var scoreA = calculateCompositeScoreWithScaledNumRatings(a);
            var scoreB = calculateCompositeScoreWithScaledNumRatings(b);
            return scoreB - scoreA;
        });
        bookRows.forEach(function(row) {
            row.remove();
        });
        bookArray.forEach(function(row) {
            listViewBox.appendChild(row);
        });
    }

    // ----------------------------
    //  SORT METHOD #2: AVG RATING
    // ----------------------------
    function sortRecommendationsByAvgRating() {
        console.log('Sort by Average Rating button clicked!');
        var bookArray = Array.from(bookRows);
        bookArray.sort(function(a, b) {
            var ratingA = getRatingValue(a.querySelector('.minirating'));
            var ratingB = getRatingValue(b.querySelector('.minirating'));
            return ratingB - ratingA;
        });
        bookRows.forEach(function(row) {
            row.remove();
        });
        bookArray.forEach(function(row) {
            listViewBox.appendChild(row);
        });
    }

    // -------------------------------------------
    //  SORT METHOD #3: BAYESIAN WEIGHTED RATING
    // -------------------------------------------
    // a) Compute the global average rating (C)
    function getGlobalAverageRating(bookElements) {
        let totalRating = 0;
        let count = 0;
        bookElements.forEach(book => {
            const rating = getRatingValue(book.querySelector('.minirating'));
            if (!isNaN(rating)) {
                totalRating += rating;
                count++;
            }
        });
        return count > 0 ? totalRating / count : 0;
    }

    // b) Compute Bayesian Weighted Rating
    function calculateBayesianWeightedRating(bookElement, C, m) {
        const R = getRatingValue(bookElement.querySelector('.minirating')); // average rating for this book
        const v = getNumRatings(bookElement.querySelector('.minirating')); // number of ratings

        if (isNaN(R) || v === 0) {
            return 0;
        }
        // Weighted rating formula: (v/(v+m))*R + (m/(v+m))*C
        return (v / (v + m)) * R + (m / (v + m)) * C;
    }

    // c) Sort using Bayesian Weighted Rating
    function sortRecommendationsByBayesian() {
        console.log('Sort by Bayesian Weighted Rating button clicked!');
        const bookArray = Array.from(bookRows);

        // 1) Calculate the global average rating
        const globalAverageRating = getGlobalAverageRating(bookArray);

        // 2) Define a constant m (minimum number of ratings)
        //    Adjust this value as needed for your recommendation set.
        const m = 1000;

        // 3) Sort based on the Bayesian Weighted Rating
        bookArray.sort((a, b) => {
            const bayesA = calculateBayesianWeightedRating(a, globalAverageRating, m);
            const bayesB = calculateBayesianWeightedRating(b, globalAverageRating, m);
            return bayesB - bayesA;
        });

        // 4) Re-append sorted books
        bookRows.forEach(function(row) {
            row.remove();
        });
        bookArray.forEach(function(row) {
            listViewBox.appendChild(row);
        });
    }

    // ------------------------------------------
    //  FILTER: RATING THRESHOLD
    // ------------------------------------------
    function filterBooksByRatingThreshold() {
        const threshold = parseFloat(ratingThresholdInput.value);
        bookRows.forEach(bookRow => {
            const rating = getRatingValue(bookRow.querySelector('.minirating'));
            if (isNaN(rating) || rating < threshold) {
                bookRow.style.display = 'none';
            } else {
                bookRow.style.display = '';
            }
        });
    }

    // Add a rating threshold input to the page
    function addRatingThresholdInput() {
        ratingThresholdInput = document.createElement('input');
        ratingThresholdInput.type = 'number';
        ratingThresholdInput.placeholder = 'Minimum Avg Rating (e.g., 3.5)';
        ratingThresholdInput.className = 'rating-threshold-input';

        // Simple tooltip on the input
        ratingThresholdInput.title = 'Only show books with average rating above this value';

        ratingThresholdInput.addEventListener('change', filterBooksByRatingThreshold);
        bigBoxBody.insertBefore(ratingThresholdInput, bigBoxBody.firstChild);
    }

    // ------------------------------------------
    //  UI BUTTONS
    // ------------------------------------------
    function addSortByCompositeButton() {
        var button = document.createElement('button');
        button.innerHTML = 'Sort by Composite Score';
        button.classList.add('sort-button');

        // Tooltip
        button.title = 'Sorts recommendations by a custom blend of average rating\nand a scaled number of ratings';

        button.addEventListener('click', sortRecommendationsByComposite);
        bigBoxBody.insertBefore(button, bigBoxBody.firstChild);
    }

    function addSortByAvgRatingButton() {
        var button = document.createElement('button');
        button.innerHTML = 'Sort by Average Rating';
        button.classList.add('sort-button');

        // Tooltip
        button.title = 'Sorts recommendations by raw average rating';

        button.addEventListener('click', sortRecommendationsByAvgRating);
        bigBoxBody.insertBefore(button, bigBoxBody.children[1]);
    }

    function addSortByBayesianButton() {
        var button = document.createElement('button');
        button.innerHTML = 'Sort by Bayesian Weighted Rating';
        button.classList.add('sort-button');

        // Tooltip for Bayesian Weighted Rating
        button.title = 'Sorts by Bayesian Weighted Rating:\n(v/(v+m))*R + (m/(v+m))*C';

        button.addEventListener('click', sortRecommendationsByBayesian);
        bigBoxBody.insertBefore(button, bigBoxBody.children[2]);
    }

    // ------------------------------------------
    //  ERROR SAFETY & MUTATION OBSERVER
    // ------------------------------------------
    function safelyExecute(fn) {
        try {
            return fn();
        } catch (e) {
            console.error('Error occurred: ', e);
        }
    }

    function observePageChanges() {
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                if (mutation.addedNodes.length || mutation.removedNodes.length) {
                    updateSelectors();
                }
            });
        });
        observer.observe(document.body, { childList: true, subtree: true });
    }

    // ------------------------------------------
    //  INITIAL SETUP
    // ------------------------------------------
    updateSelectors();
    safelyExecute(addSortByCompositeButton);
    safelyExecute(addSortByAvgRatingButton);
    safelyExecute(addSortByBayesianButton);
    safelyExecute(addRatingThresholdInput);
    observePageChanges();

    // ------------------------------------------
    //  STYLING
    // ------------------------------------------
    GM_addStyle(`
    .sort-button {
        margin-right: 5px; /* instead of 10px all around */
     }

    .sort-button, input[type='number'] {
        margin: 10px;
        padding: 8px 16px;
        cursor: pointer;
        background-color: #419C69;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        font-weight: bold;
        transition: background-color 0.3s;
    }
    .sort-button:hover {
        background-color: #2B6846;
        box-shadow: 0 0 6px rgba(0,0,0,0.2);
    }
    input[type='number'] {
        width: 25%;
        background-color: #f0f0f0;
        color: #333;
        border: 2px solid #419C69;
        border-radius: 4px;
        padding: 10px;
        font-size: 10.5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    input[type='number']:focus {
        outline: none;
        box-shadow: 0 0 5px #005f6b;
    }
    `);
})();
