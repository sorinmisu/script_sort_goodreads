// ==UserScript==
// @name         Enhanced Goodreads Recommendations Sorting
// @namespace    http://yournamespace.com
// @version      1.0
// @description  Sort Goodreads recommendations by average rating or composite score with UI enhancements and error handling.
// @author       Your Name
// @match        https://www.goodreads.com/recommendations*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    // Cached DOM selectors
    let bookRows, listViewBox, bigBoxBody, ratingThresholdInput;

    // Update the cached selectors
    function updateSelectors() {
        bookRows = document.querySelectorAll('.bookRow.clearfix');
        listViewBox = document.querySelector('.listViewBox');
        bigBoxBody = document.querySelector('.bigBoxBody');
    }

    // Function to calculate a composite score based on average rating and logarithmically scaled number of ratings
    function calculateCompositeScoreWithScaledNumRatings(bookElement) {
        var avgRating = getRatingValue(bookElement.querySelector('.minirating'));
        var numRatings = getNumRatings(bookElement.querySelector('.minirating'));
        var scaledNumRatings = (numRatings / 10000000) * 10;
        var weightAvgRating = 0.7;
        var weightScaledNumRatings = 0.3;
        var compositeScore = (weightAvgRating * avgRating) + (weightScaledNumRatings * scaledNumRatings);
        return compositeScore;
    }

    // Function to extract the number of ratings from the rating element
    function getNumRatings(ratingElement) {
        if (ratingElement) {
            var match = ratingElement.textContent.match(/â€” (\d+,?\d+) ratings/);
            if (match) {
                return parseInt(match[1].replace(',', ''), 10);
            }
        }
        return 0;
    }

    // Function to extract the numeric value from the rating element
    function getRatingValue(ratingElement) {
        if (ratingElement) {
            var match = ratingElement.textContent.match(/(\d+\.\d+)/);
            if (match) {
                return parseFloat(match[0]);
            }
        }
        return NaN;
    }

    // Function to sort recommendations based on composite score
    function sortRecommendations() {
        console.log('Sort button clicked!');
        var bookArray = Array.from(bookRows);
        bookArray.sort(function(a, b) {
            var scoreA = calculateCompositeScoreWithScaledNumRatings(a);
            var scoreB = calculateCompositeScoreWithScaledNumRatings(b);
            return scoreB - scoreA;
        });
        bookRows.forEach(function(row) {
            row.remove();
        });
        bookArray.forEach(function(row) {
            listViewBox.appendChild(row);
        });
    }

    // Function to sort recommendations based on average rating
    function sortRecommendationsByAvgRating() {
        console.log('Sort by Average Rating button clicked!');
        var bookArray = Array.from(bookRows);
        bookArray.sort(function(a, b) {
            var ratingA = getRatingValue(a.querySelector('.minirating'));
            var ratingB = getRatingValue(b.querySelector('.minirating'));
            return ratingB - ratingA;
        });
        bookRows.forEach(function(row) {
            row.remove();
        });
        bookArray.forEach(function(row) {
            listViewBox.appendChild(row);
        });
    }

    // Function to filter books based on the set rating threshold
    function filterBooksByRatingThreshold() {
        const threshold = parseFloat(ratingThresholdInput.value);
        bookRows.forEach(bookRow => {
            const rating = getRatingValue(bookRow.querySelector('.minirating'));
            if (isNaN(rating) || rating < threshold) {
                bookRow.style.display = 'none';
            } else {
                bookRow.style.display = '';
            }
        });
    }

    // Function to add a rating threshold input to the page
    function addRatingThresholdInput() {
        ratingThresholdInput = document.createElement('input');
        ratingThresholdInput.type = 'number';
        ratingThresholdInput.placeholder = 'Minimum Avg Rating (e.g., 3.5)';
        ratingThresholdInput.className = 'rating-threshold-input';
        ratingThresholdInput.addEventListener('change', filterBooksByRatingThreshold);
        bigBoxBody.insertBefore(ratingThresholdInput, bigBoxBody.firstChild);
    }

    function addSortButton() {
        var sortButton = document.createElement('button');
        sortButton.innerHTML = 'Sort Recommendations';
        sortButton.classList.add('sort-button');
        sortButton.addEventListener('click', sortRecommendations);
        bigBoxBody.insertBefore(sortButton, bigBoxBody.firstChild);
    }

    function addSortByAvgRatingButton() {
        var sortAvgRatingButton = document.createElement('button');
        sortAvgRatingButton.innerHTML = 'Sort by Avg Rating';
        sortAvgRatingButton.classList.add('sort-button');
        sortAvgRatingButton.addEventListener('click', sortRecommendationsByAvgRating);
        bigBoxBody.insertBefore(sortAvgRatingButton, bigBoxBody.children[1]);
    }

    function safelyExecute(fn) {
        try {
            return fn();
        } catch (e) {
            console.error('Error occurred: ', e);
        }
    }

    function observePageChanges() {
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                if (mutation.addedNodes.length || mutation.removedNodes.length) {
                    updateSelectors();
                }
            });
        });
        observer.observe(document.body, { childList: true, subtree: true });
    }

    // Initial setup: update selectors, add UI elements, and set up observer
    updateSelectors();
    safelyExecute(addSortButton);
    safelyExecute(addSortByAvgRatingButton);
    safelyExecute(addRatingThresholdInput);
    observePageChanges();

    // Styling for the buttons and input
    GM_addStyle(`
    .sort-button, input[type='number'] {
        margin: 10px;
        padding: 8px 16px;
        cursor: pointer;
        background-color: #419C69;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        font-weight: bold;
        transition: background-color 0.3s;
    }
    .sort-button:hover {
        background-color: #2B6846;
    }
    input[type='number'] {
        width: 25%; /* Adjusted width */
        background-color: #f0f0f0; /* Light grey background */
        color: #333; /* Darker text color for better contrast */
        border: 2px solid #419C69; /* Adding border with the same color as buttons */
        border-radius: 4px; /* Rounded corners */
        padding: 10px; /* More padding for better text visibility */
        font-size: 10.5px; /* Slightly larger font size */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */
    }
    input[type='number']:focus {
        outline: none; /* Removing default focus outline */
        box-shadow: 0 0 5px #005f6b; /* Focus state with a different color shadow */
    }
`);

})();
